{"version":3,"sources":["logo.png","TodoList.js","TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoList","this","props","items","handleDelete","handleEdit","handleComplete","map","item","className","key","id","type","onChange","checked","completed","title","class","onClick","Component","TodoInput","handleChange","handleSubmit","editStatus","onSubmit","required","value","App","state","showCompleted","e","setState","target","preventDefault","updatedItems","Date","now","clearList","filteredItems","filter","selectedItem","find","completedTodos","unCompletedTodos","push","src","logo","alt","every","todo","todos","some","isSomeCompleted","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9601be47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.de7e31a8.png\";","import React, { Component } from \"react\";\r\n\r\nexport default class TodoList extends Component {\r\n    render() {\r\n\r\n        const { items, handleDelete, handleEdit, handleComplete } = this.props;\r\n\r\n        return (\r\n            items.map(item => {\r\n                return (\r\n                    <div className=\"card\" key={item.id}>\r\n                        <div className='col-1 col-s-12 d-flex flex-center'>\r\n                            <label>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    onChange={() => { handleComplete(item.id) }}\r\n                                    checked={item.completed}\r\n                                />\r\n                                <span className=\"label-text\"></span>\r\n                            </label>\r\n                        </div>\r\n                        <div className='col-9 col-s-12 list-frame'>\r\n                            <div className=\"title-frame\">\r\n                                <p>{item.title}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className='col-2 col-s-12 d-flex flex-center'>\r\n                            <i class=\"fas edit-button fa-pen\" onClick={() => handleEdit(item.id)}></i>\r\n                            <i class=\"fas delete-button fa-trash\" onClick={() => handleDelete(item.id)}></i>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n\r\n        const { item, handleChange, handleSubmit, editStatus } = this.props;\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-input\">\r\n                    <input type=\"text\" required=\" \"\r\n                        value={item}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <label>Enter New Todo </label>\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-default\">\r\n                    {editStatus ? \"Edit Todo\" : \"Add New Todo\"}\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\nimport logo from './logo.png';\nimport './zero.css';\nimport './App.css';\nimport TodoList from \"./TodoList\";\nimport TodoInput from \"./TodoInput\";\n\nclass App extends Component {\n\n  state = {\n    items: [],\n    id: 0,\n    item: \"\",\n    editStatus: false,\n    showCompleted: false\n  };\n\n  handleChange = e => {\n    this.setState({\n      item: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const newItem = {\n      id: Date.now(),\n      title: this.state.item,\n      completed: false,\n    };\n\n    const updatedItems = [newItem, ...this.state.items];\n\n    this.setState({\n      items: updatedItems,\n      item: \"\",\n      id: 0,\n      editStatus: false\n    });\n\n  };\n\n  clearList = () => {\n    this.setState({\n      items: []\n    });\n  };\n\n  handleEdit = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n    const selectedItem = this.state.items.find(item => item.id === id);\n\n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editStatus: true,\n      id: id\n    });\n  };\n\n  handleDelete = id => {\n    const filteredItems = this.state.items.filter(item => item.id !== id);\n\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  handleComplete = id => {\n    const updatedItems = this.state.items.map(item => {\n      if (item.id === id) { item.completed = !item.completed }\n      return item;\n    })\n\n    this.setState({\n      items: updatedItems\n    })\n  };\n\n  render() {\n\n    const completedTodos = [];\n    const unCompletedTodos = [];\n    this.state.items.map(item => {\n      (item.completed) ? completedTodos.push(item) : unCompletedTodos.push(item)\n    })\n\n    const isAllCompleted = (todos) => {\n      return todos.every((todo) => todo.completed);\n    };\n\n    const isSomeCompleted = (todos) => {\n      return todos.some((todo) => todo.completed);\n    };\n\n    return (\n      <main>\n        <div className=\"col col-5 col-m-12 half-left\">\n          <div className=\"todo-frame\">\n            <div className=\"logo-frame d-flex flex-center\">\n              <img src={logo} alt=\"\" className='logo-brand' />\n            </div>\n\n            <TodoInput\n              item={this.state.item}\n              handleChange={this.handleChange}\n              handleSubmit={this.handleSubmit}\n              editStatus={this.state.editStatus}\n            />\n\n          </div>\n        </div>\n        <div className=\"col col-7 col-m-12 half-right\">\n\n          {isAllCompleted(this.state.items) && (\n            <p className='todo-empty'>Todo is Empty</p>\n          )}\n\n          <TodoList\n            items={unCompletedTodos}\n            handleEdit={this.handleEdit}\n            handleDelete={this.handleDelete}\n            handleComplete={this.handleComplete}\n          />\n\n          {isSomeCompleted(this.state.items) && (\n            <p className='todo-completed'>Completed Todos</p>\n          )}\n\n          <TodoList\n            items={completedTodos}\n            handleEdit={this.handleEdit}\n            handleDelete={this.handleDelete}\n            handleComplete={this.handleComplete}\n          />\n\n        </div>\n      </main>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}